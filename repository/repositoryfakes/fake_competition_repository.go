// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"context"
	"sync"

	"github.com/SyaibanAhmadRamadhan/go-export-import/model"
	"github.com/SyaibanAhmadRamadhan/go-export-import/repository"
)

type FakeCompetitionRepository struct {
	InsertManyStub        func(context.Context, []model.Competition) error
	insertManyMutex       sync.RWMutex
	insertManyArgsForCall []struct {
		arg1 context.Context
		arg2 []model.Competition
	}
	insertManyReturns struct {
		result1 error
	}
	insertManyReturnsOnCall map[int]struct {
		result1 error
	}
	LeaderBoardStub        func(context.Context, string) ([]repository.LeaderBoardResult, error)
	leaderBoardMutex       sync.RWMutex
	leaderBoardArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	leaderBoardReturns struct {
		result1 []repository.LeaderBoardResult
		result2 error
	}
	leaderBoardReturnsOnCall map[int]struct {
		result1 []repository.LeaderBoardResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCompetitionRepository) InsertMany(arg1 context.Context, arg2 []model.Competition) error {
	var arg2Copy []model.Competition
	if arg2 != nil {
		arg2Copy = make([]model.Competition, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.insertManyMutex.Lock()
	ret, specificReturn := fake.insertManyReturnsOnCall[len(fake.insertManyArgsForCall)]
	fake.insertManyArgsForCall = append(fake.insertManyArgsForCall, struct {
		arg1 context.Context
		arg2 []model.Competition
	}{arg1, arg2Copy})
	stub := fake.InsertManyStub
	fakeReturns := fake.insertManyReturns
	fake.recordInvocation("InsertMany", []interface{}{arg1, arg2Copy})
	fake.insertManyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCompetitionRepository) InsertManyCallCount() int {
	fake.insertManyMutex.RLock()
	defer fake.insertManyMutex.RUnlock()
	return len(fake.insertManyArgsForCall)
}

func (fake *FakeCompetitionRepository) InsertManyCalls(stub func(context.Context, []model.Competition) error) {
	fake.insertManyMutex.Lock()
	defer fake.insertManyMutex.Unlock()
	fake.InsertManyStub = stub
}

func (fake *FakeCompetitionRepository) InsertManyArgsForCall(i int) (context.Context, []model.Competition) {
	fake.insertManyMutex.RLock()
	defer fake.insertManyMutex.RUnlock()
	argsForCall := fake.insertManyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCompetitionRepository) InsertManyReturns(result1 error) {
	fake.insertManyMutex.Lock()
	defer fake.insertManyMutex.Unlock()
	fake.InsertManyStub = nil
	fake.insertManyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCompetitionRepository) InsertManyReturnsOnCall(i int, result1 error) {
	fake.insertManyMutex.Lock()
	defer fake.insertManyMutex.Unlock()
	fake.InsertManyStub = nil
	if fake.insertManyReturnsOnCall == nil {
		fake.insertManyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertManyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCompetitionRepository) LeaderBoard(arg1 context.Context, arg2 string) ([]repository.LeaderBoardResult, error) {
	fake.leaderBoardMutex.Lock()
	ret, specificReturn := fake.leaderBoardReturnsOnCall[len(fake.leaderBoardArgsForCall)]
	fake.leaderBoardArgsForCall = append(fake.leaderBoardArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.LeaderBoardStub
	fakeReturns := fake.leaderBoardReturns
	fake.recordInvocation("LeaderBoard", []interface{}{arg1, arg2})
	fake.leaderBoardMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCompetitionRepository) LeaderBoardCallCount() int {
	fake.leaderBoardMutex.RLock()
	defer fake.leaderBoardMutex.RUnlock()
	return len(fake.leaderBoardArgsForCall)
}

func (fake *FakeCompetitionRepository) LeaderBoardCalls(stub func(context.Context, string) ([]repository.LeaderBoardResult, error)) {
	fake.leaderBoardMutex.Lock()
	defer fake.leaderBoardMutex.Unlock()
	fake.LeaderBoardStub = stub
}

func (fake *FakeCompetitionRepository) LeaderBoardArgsForCall(i int) (context.Context, string) {
	fake.leaderBoardMutex.RLock()
	defer fake.leaderBoardMutex.RUnlock()
	argsForCall := fake.leaderBoardArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCompetitionRepository) LeaderBoardReturns(result1 []repository.LeaderBoardResult, result2 error) {
	fake.leaderBoardMutex.Lock()
	defer fake.leaderBoardMutex.Unlock()
	fake.LeaderBoardStub = nil
	fake.leaderBoardReturns = struct {
		result1 []repository.LeaderBoardResult
		result2 error
	}{result1, result2}
}

func (fake *FakeCompetitionRepository) LeaderBoardReturnsOnCall(i int, result1 []repository.LeaderBoardResult, result2 error) {
	fake.leaderBoardMutex.Lock()
	defer fake.leaderBoardMutex.Unlock()
	fake.LeaderBoardStub = nil
	if fake.leaderBoardReturnsOnCall == nil {
		fake.leaderBoardReturnsOnCall = make(map[int]struct {
			result1 []repository.LeaderBoardResult
			result2 error
		})
	}
	fake.leaderBoardReturnsOnCall[i] = struct {
		result1 []repository.LeaderBoardResult
		result2 error
	}{result1, result2}
}

func (fake *FakeCompetitionRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.insertManyMutex.RLock()
	defer fake.insertManyMutex.RUnlock()
	fake.leaderBoardMutex.RLock()
	defer fake.leaderBoardMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCompetitionRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.CompetitionRepository = new(FakeCompetitionRepository)
